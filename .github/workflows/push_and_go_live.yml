name: push_and_go_live

on:
  push:
    branches:
      - main
      
jobs:
  release:
    name: 'Build, Test, Analyse and Push to ACR'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    env:
      DIRECTORY_NAME: DienstDuizend.ProfileService
      IMAGE_NAME: profile-service
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    - name: Cache
      uses: actions/cache@v4
      with:    
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ env.DIRECTORY_NAME }} 
        restore-keys: |      
          ${{ runner.os }}-nuget-${{ env.DIRECTORY_NAME }} 

    - name: Setup .NET
      uses: actions/setup-dotnet@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 1.17

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Unit Testing
      run: dotnet test ./tests/${{ env.DIRECTORY_NAME }}.UnitTests/${{ env.DIRECTORY_NAME }}.UnitTests.csproj --no-build --no-restore --configuration Release 

    - name: Integration Testing
      run: dotnet test ./tests/${{ env.DIRECTORY_NAME }}.IntegrationTests/${{ env.DIRECTORY_NAME }}.IntegrationTests.csproj --no-build --no-restore --configuration Release 

    - name: SonarCloud Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_PROJECT_KEY: "RM-DienstDuizend_DienstDuizend.ProfileService"
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global dotnet-coverage
        export PATH="$PATH:/home/runner/.dotnet/tools"
        dotnet sonarscanner begin /k:"${SONAR_PROJECT_KEY}" /o:"rm-dienstduizend" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml /d:sonar.login="${SONAR_TOKEN}"
        dotnet build --no-restore --configuration Release
        dotnet-coverage collect "dotnet test" -f xml -o "coverage.xml"
        dotnet sonarscanner end /d:sonar.login="${SONAR_TOKEN}"



    - name: Run Trivy vulnerability scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'  

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/dotnet@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
          args: --all-projects --exclude=tests # Important do not remove, since our unusual project structure apparently
          command: monitor

    - name: 'Docker Login'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build the docker image and push it to ACR
      uses: docker/build-push-action@v5
      with:
        push: true
        tags: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
        file: src/${{ env.DIRECTORY_NAME }}/Dockerfile
